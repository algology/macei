-- Create a table to store user feedback
CREATE TABLE feedback (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id),
    content TEXT NOT NULL,
    page_url TEXT,
    component TEXT,
    rating INTEGER,
    idea_id BIGINT REFERENCES ideas(id),
    mission_id BIGINT REFERENCES missions(id),
    organization_id BIGINT REFERENCES organizations(id),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT timezone('utc'::text, now()),
    status TEXT DEFAULT 'unread',
    priority TEXT DEFAULT 'medium',
    tags TEXT[]
);

-- Add commenting to explain the purpose of the table
COMMENT ON TABLE feedback IS 'Stores user feedback during beta testing and beyond';
COMMENT ON COLUMN feedback.user_id IS 'The user who provided the feedback';
COMMENT ON COLUMN feedback.content IS 'The actual feedback text provided by the user';
COMMENT ON COLUMN feedback.page_url IS 'The URL where the feedback was submitted from';
COMMENT ON COLUMN feedback.component IS 'The specific component or feature the feedback is about';
COMMENT ON COLUMN feedback.rating IS 'Optional numerical rating (e.g., 1-5)';
COMMENT ON COLUMN feedback.idea_id IS 'Related idea if applicable';
COMMENT ON COLUMN feedback.mission_id IS 'Related mission if applicable';
COMMENT ON COLUMN feedback.organization_id IS 'Related organization if applicable';
COMMENT ON COLUMN feedback.status IS 'Status of the feedback (unread, read, in-progress, resolved)';
COMMENT ON COLUMN feedback.priority IS 'Priority level (low, medium, high)';
COMMENT ON COLUMN feedback.tags IS 'Array of tags for categorizing feedback';

-- Create indexes for better query performance
CREATE INDEX feedback_user_id_idx ON feedback (user_id);
CREATE INDEX feedback_idea_id_idx ON feedback (idea_id);
CREATE INDEX feedback_status_idx ON feedback (status);

-- Enable row-level security
ALTER TABLE feedback ENABLE ROW LEVEL SECURITY;

-- Create policy to allow users to read only their own feedback
CREATE POLICY feedback_select_policy ON feedback 
    FOR SELECT 
    USING (auth.uid() = user_id);

-- Create policy to allow users to insert their own feedback
CREATE POLICY feedback_insert_policy ON feedback 
    FOR INSERT 
    WITH CHECK (auth.uid() = user_id);

-- Create policy to allow users to update their own feedback
CREATE POLICY feedback_update_policy ON feedback 
    FOR UPDATE 
    USING (auth.uid() = user_id);

-- Create policy to allow admins to select all feedback (placeholder - implement proper admin role)
-- This will need to be customized based on your admin role setup
-- CREATE POLICY feedback_admin_select_policy ON feedback 
--    FOR SELECT 
--    USING (auth.uid() IN (SELECT id FROM auth.users WHERE raw_app_meta_data->>'role' = 'admin')); 